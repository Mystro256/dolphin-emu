diff -rupN dolphin-emu-2879cbd2b564-org/CMakeLists.txt dolphin-emu-2879cbd2b564-mbedtls/CMakeLists.txt
--- dolphin-emu-2879cbd2b564-org/CMakeLists.txt	2015-12-11 10:37:55.296867986 -0500
+++ dolphin-emu-2879cbd2b564-mbedtls/CMakeLists.txt	2015-12-17 10:10:40.622598000 -0500
@@ -603,11 +603,11 @@ if(USE_UPNP)
 endif()
 
 if(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" AND NOT ANDROID)
-	include(FindPolarSSL)
+	include(FindMbedTLS)
 endif()
-if(POLARSSL_FOUND AND POLARSSL_WORKS)
-	message("Using shared PolarSSL")
-	include_directories(${POLARSSL_INCLUDE_DIR})
+if(MBEDTLS_FOUND)
+	message("Using shared mbed TLS")
+	include_directories(${MBEDTLS_INCLUDE_DIRS})
 else()
 	message("Using PolarSSL from Externals")
 	set(POLARSSL_LIBRARY polarssl)
diff -rupN dolphin-emu-2879cbd2b564-org/CMakeTests/FindMbedTLS.cmake dolphin-emu-2879cbd2b564-mbedtls/CMakeTests/FindMbedTLS.cmake
--- dolphin-emu-2879cbd2b564-org/CMakeTests/FindMbedTLS.cmake	1969-12-31 19:00:00.000000000 -0500
+++ dolphin-emu-2879cbd2b564-mbedtls/CMakeTests/FindMbedTLS.cmake	2015-12-17 10:11:05.075818499 -0500
@@ -0,0 +1,20 @@
+find_path(MBEDTLS_INCLUDE_DIR mbedtls/ssl.h)
+
+find_library(MBEDTLS_LIBRARY mbedtls)
+find_library(MBEDX509_LIBRARY mbedx509)
+find_library(MBEDCRYPTO_LIBRARY mbedcrypto)
+
+set(MBEDTLS_INCLUDE_DIRS ${MBEDTLS_INCLUDE_DIR})
+set(MBEDTLS_LIBRARIES ${MBEDTLS_LIBRARY} ${MBEDX509_LIBRARY} ${MBEDCRYPTO_LIBRARY})
+
+set(CMAKE_REQUIRED_INCLUDES ${MBEDTLS_INCLUDE_DIRS})
+check_cxx_source_compiles("
+	#include <mbedtls/version.h>
+	int main() {}"
+	MBEDTLS_VERSION_OK)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(MBEDTLS DEFAULT_MSG
+	MBEDTLS_INCLUDE_DIR MBEDTLS_LIBRARY MBEDX509_LIBRARY MBEDCRYPTO_LIBRARY MBEDTLS_VERSION_OK)
+
+mark_as_advanced(MBEDTLS_INCLUDE_DIR MBEDTLS_LIBRARY MBEDX509_LIBRARY MBEDCRYPTO_LIBRARY)
diff -rupN dolphin-emu-2879cbd2b564-org/CMakeTests/FindPolarSSL.cmake dolphin-emu-2879cbd2b564-mbedtls/CMakeTests/FindPolarSSL.cmake
--- dolphin-emu-2879cbd2b564-org/CMakeTests/FindPolarSSL.cmake	2015-12-11 10:37:55.338888986 -0500
+++ dolphin-emu-2879cbd2b564-mbedtls/CMakeTests/FindPolarSSL.cmake	1969-12-31 19:00:00.000000000 -0500
@@ -1,59 +0,0 @@
-# Locate polarssl library
-# This module defines
-#  POLARSSL_FOUND
-#  POLARSSL_LIBRARY
-#  POLARSSL_INCLUDE_DIR
-#  POLARSSL_WORKS, this is true if polarssl is found and contains the methods
-#  needed by dolphin-emu
-
-if(POLARSSL_INCLUDE_DIR AND POLARSSL_LIBRARY)
-	# Already in cache, be silent
-	set(POLARSSL_FIND_QUIETLY TRUE)
-endif()
-
-find_path(POLARSSL_INCLUDE_DIR polarssl/ssl.h)
-find_library(POLARSSL_LIBRARY polarssl)
-
-if (POLARSSL_INCLUDE_DIR AND POLARSSL_LIBRARY)
-	set (POLARSSL_FOUND TRUE)
-endif ()
-
-if (POLARSSL_FOUND)
-	if (NOT POLARSSL_FIND_QUIETLY)
-		message (STATUS "Found the polarssl libraries at ${POLARSSL_LIBRARY}")
-		message (STATUS "Found the polarssl headers at ${POLARSSL_INCLUDE_DIR}")
-	endif (NOT POLARSSL_FIND_QUIETLY)
-
-	message(STATUS "Checking to see if system version contains necessary methods")
-
-	set(CMAKE_REQUIRED_INCLUDES ${POLARSSL_INCLUDE_DIR})
-	set(CMAKE_REQUIRED_LIBRARIES ${POLARSSL_LIBRARY})
-	check_cxx_source_compiles("
-	#include <polarssl/net.h>
-	#include <polarssl/ssl.h>
-	#include <polarssl/havege.h>
-	int main()
-	{
-	ssl_context ctx;
-	ssl_session session;
-	havege_state hs;
-
-	ssl_init(&ctx);
-	havege_init(&hs);
-	ssl_set_rng(&ctx, havege_random, &hs);
-	ssl_set_session(&ctx, &session);
-
-	ssl_close_notify(&ctx);
-	ssl_session_free(&session);
-	ssl_free(&ctx);
-
-	return 0;
-	}"
-	POLARSSL_WORKS)
-
-else ()
-	message (STATUS "Could not find polarssl")
-endif ()
-
-MARK_AS_ADVANCED(POLARSSL_INCLUDE_DIR POLARSSL_LIBRARY)
-
diff -rupN dolphin-emu-2879cbd2b564-org/Source/Core/Common/Src/Crypto/tools.h dolphin-emu-2879cbd2b564-mbedtls/Source/Core/Common/Src/Crypto/tools.h
--- dolphin-emu-2879cbd2b564-org/Source/Core/Common/Src/Crypto/tools.h	2015-12-11 10:37:53.796117985 -0500
+++ dolphin-emu-2879cbd2b564-mbedtls/Source/Core/Common/Src/Crypto/tools.h	2015-12-17 10:10:40.648611000 -0500
@@ -4,7 +4,8 @@
 
 #ifndef _TOOLS_H
 #define _TOOLS_H
-#include <polarssl/sha1.h>
+#include <mbedtls/sha1.h>
+#include <mbedtls/compat-1.3.h>
 
 // bignum
 int bn_compare(u8 *a, u8 *b, u32 n);
diff -rupN dolphin-emu-2879cbd2b564-org/Source/Core/Core/CMakeLists.txt dolphin-emu-2879cbd2b564-mbedtls/Source/Core/Core/CMakeLists.txt
--- dolphin-emu-2879cbd2b564-org/Source/Core/Core/CMakeLists.txt	2015-12-11 10:37:52.918679486 -0500
+++ dolphin-emu-2879cbd2b564-mbedtls/Source/Core/Core/CMakeLists.txt	2015-12-17 10:10:40.650611999 -0500
@@ -232,7 +232,7 @@ if(LIBUSB_FOUND)
 	set(SRCS	${SRCS}	Src/IPC_HLE/WII_IPC_HLE_Device_hid.cpp)
 endif(LIBUSB_FOUND)
 
-set(LIBS ${LIBS} ${POLARSSL_LIBRARY})
+set(LIBS ${LIBS} ${MBEDTLS_LIBRARIES})
 
 if(WIN32)
 	set(SRCS ${SRCS} Src/HW/BBA-TAP/TAP_Win32.cpp Src/stdafx.cpp
diff -rupN dolphin-emu-2879cbd2b564-org/Source/Core/Core/Src/ec_wii.cpp dolphin-emu-2879cbd2b564-mbedtls/Source/Core/Core/Src/ec_wii.cpp
--- dolphin-emu-2879cbd2b564-org/Source/Core/Core/Src/ec_wii.cpp	2015-12-11 10:37:53.281860985 -0500
+++ dolphin-emu-2879cbd2b564-mbedtls/Source/Core/Core/Src/ec_wii.cpp	2015-12-17 10:10:40.652613000 -0500
@@ -11,7 +11,8 @@
 #include <string.h>
 #include "Common.h"
 #include "Crypto/aes.h"
-#include "polarssl/sha1.h"
+#include <mbedtls/sha1.h>
+#include <mbedtls/compat-1.3.h>
 #include "Crypto/tools.h"
 #include "FileUtil.h"
 #include "ec_wii.h"
diff -rupN dolphin-emu-2879cbd2b564-org/Source/Core/Core/Src/IPC_HLE/WII_IPC_HLE_Device_net_ssl.cpp dolphin-emu-2879cbd2b564-mbedtls/Source/Core/Core/Src/IPC_HLE/WII_IPC_HLE_Device_net_ssl.cpp
--- dolphin-emu-2879cbd2b564-org/Source/Core/Core/Src/IPC_HLE/WII_IPC_HLE_Device_net_ssl.cpp	2015-12-11 10:37:53.038739485 -0500
+++ dolphin-emu-2879cbd2b564-mbedtls/Source/Core/Core/Src/IPC_HLE/WII_IPC_HLE_Device_net_ssl.cpp	2015-12-17 10:10:40.654613999 -0500
@@ -27,13 +27,14 @@ CWII_IPC_HLE_Device_net_ssl::~CWII_IPC_H
 			ssl_close_notify(&_SSL[i].ctx);
 			ssl_session_free(&_SSL[i].session);
 			ssl_free(&_SSL[i].ctx);
+			mbedtls_ssl_config_free(&_SSL[i].config);
 
-			x509_free(&_SSL[i].cacert);
-			x509_free(&_SSL[i].clicert);
+			x509_crt_free(&_SSL[i].cacert);
+			x509_crt_free(&_SSL[i].clicert);
 
 			memset(&_SSL[i].ctx, 0, sizeof(ssl_context));
 			memset(&_SSL[i].session, 0, sizeof(ssl_session));
-			memset(&_SSL[i].hs, 0, sizeof(havege_state));
+			memset(&_SSL[i].entropy, 0, sizeof(entropy_context));
 			memset(_SSL[i].hostname, 0, NET_SSL_MAX_HOSTNAME_LEN);
 
 			_SSL[i].active = false;
@@ -139,26 +140,21 @@ bool CWII_IPC_HLE_Device_net_ssl::IOCtlV
 		if (freeSSL)
 		{
 			int sslID = freeSSL - 1;
-			int ret = ssl_init(&_SSL[sslID].ctx);
-			if (ret)
-			{
-				// Cleanup possibly dirty ctx
-				memset(&_SSL[sslID].ctx, 0, sizeof(ssl_context));
-				goto _SSL_NEW_ERROR;
-			}
-
-			havege_init(&_SSL[sslID].hs);
-			ssl_set_rng(&_SSL[sslID].ctx, havege_random, &_SSL[sslID].hs);
+			mbedtls_ssl_init(&_SSL[sslID].ctx);
+			mbedtls_ssl_config_init(&_SSL[sslID].config);
+			mbedtls_ssl_config_defaults(&_SSL[sslID].config, MBEDTLS_SSL_IS_CLIENT,
+						MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT);
+			mbedtls_entropy_init(&_SSL[sslID].entropy);
+			mbedtls_ssl_conf_rng(&_SSL[sslID].config, entropy_func, &_SSL[sslID].entropy);
 
 			// For some reason we can't use TLSv1.2, v1.1 and below are fine!
-			ssl_set_max_version(&_SSL[sslID].ctx, SSL_MAJOR_VERSION_3, SSL_MINOR_VERSION_2);
+			mbedtls_ssl_conf_max_version(&_SSL[sslID].config, SSL_MAJOR_VERSION_3, SSL_MINOR_VERSION_2);
 
-			ssl_set_ciphersuites(&_SSL[sslID].ctx, ssl_default_ciphersuites);
 			ssl_set_session(&_SSL[sslID].ctx, &_SSL[sslID].session);
 
-			ssl_set_endpoint(&_SSL[sslID].ctx, SSL_IS_CLIENT);
-			ssl_set_authmode(&_SSL[sslID].ctx, SSL_VERIFY_NONE);
-			ssl_set_renegotiation(&_SSL[sslID].ctx, SSL_RENEGOTIATION_ENABLED);
+			mbedtls_ssl_conf_endpoint(&_SSL[sslID].config, SSL_IS_CLIENT);
+			mbedtls_ssl_conf_authmode(&_SSL[sslID].config, SSL_VERIFY_NONE);
+			mbedtls_ssl_conf_renegotiation(&_SSL[sslID].config, SSL_RENEGOTIATION_ENABLED);
 
 			memcpy(_SSL[sslID].hostname, hostname, min((int)BufferOutSize2, NET_SSL_MAX_HOSTNAME_LEN));
 			_SSL[sslID].hostname[NET_SSL_MAX_HOSTNAME_LEN-1] = '\0';
@@ -192,12 +188,12 @@ _SSL_NEW_ERROR:
 			ssl_session_free(&_SSL[sslID].session);
 			ssl_free(&_SSL[sslID].ctx);
 
-			x509_free(&_SSL[sslID].cacert);
-			x509_free(&_SSL[sslID].clicert);
+			x509_crt_free(&_SSL[sslID].cacert);
+			x509_crt_free(&_SSL[sslID].clicert);
 
 			memset(&_SSL[sslID].ctx, 0, sizeof(ssl_context));
 			memset(&_SSL[sslID].session, 0, sizeof(ssl_session));
-			memset(&_SSL[sslID].hs, 0, sizeof(havege_state));
+			memset(&_SSL[sslID].entropy, 0, sizeof(entropy_context));
 			memset(_SSL[sslID].hostname, 0, NET_SSL_MAX_HOSTNAME_LEN);
 
 			_SSL[sslID].active = false;
@@ -231,7 +227,7 @@ _SSL_NEW_ERROR:
 		int sslID = Memory::Read_U32(BufferOut) - 1;
 		if (SSLID_VALID(sslID))
 		{
-			int ret = x509parse_crt_der(
+			int ret = x509_crt_parse_der(
 				&_SSL[sslID].cacert,
 				Memory::GetPointer(BufferOut2),
 				BufferOutSize2);
@@ -242,7 +238,7 @@ _SSL_NEW_ERROR:
 			}
 			else
 			{
-				ssl_set_ca_chain(&_SSL[sslID].ctx, &_SSL[sslID].cacert, NULL, _SSL[sslID].hostname);
+				mbedtls_ssl_conf_ca_chain(&_SSL[sslID].config, &_SSL[sslID].cacert, NULL);
 				Memory::Write_U32(SSL_OK, _BufferIn);
 			}
 
@@ -268,23 +264,23 @@ _SSL_NEW_ERROR:
 		if (SSLID_VALID(sslID))
 		{
 			std::string cert_base_path(File::GetUserPath(D_WIIUSER_IDX));
-			int ret = x509parse_crtfile(&_SSL[sslID].clicert, (cert_base_path + "clientca.pem").c_str());
-			int rsa_ret = x509parse_keyfile(&_SSL[sslID].rsa, (cert_base_path + "clientcakey.pem").c_str(), NULL);
-			if (ret || rsa_ret)
+			int ret = x509_crt_parse_file(&_SSL[sslID].clicert, (cert_base_path + "clientca.pem").c_str());
+			int pk_ret = pk_parse_keyfile(&_SSL[sslID].pk, (cert_base_path + "clientcakey.pem").c_str(), NULL);
+			if (ret || pk_ret)
 			{
-				x509_free(&_SSL[sslID].clicert);
-				rsa_free(&_SSL[sslID].rsa);
-				memset(&_SSL[sslID].clicert, 0, sizeof(x509_cert));
-				memset(&_SSL[sslID].rsa, 0, sizeof(rsa_context));
+				x509_crt_free(&_SSL[sslID].clicert);
+				pk_free(&_SSL[sslID].pk);
+				memset(&_SSL[sslID].clicert, 0, sizeof(x509_crt));
+				memset(&_SSL[sslID].pk, 0, sizeof(pk_context));
 				Memory::Write_U32(SSL_ERR_FAILED, _BufferIn);
 			}
 			else
 			{
-				ssl_set_own_cert(&_SSL[sslID].ctx, &_SSL[sslID].clicert, &_SSL[sslID].rsa);
+				ssl_set_own_cert(&_SSL[sslID].config, &_SSL[sslID].clicert, &_SSL[sslID].pk);
 				Memory::Write_U32(SSL_OK, _BufferIn);
 			}
 
-			INFO_LOG(WII_IPC_SSL, "IOCTLV_NET_SSL_SETBUILTINCLIENTCERT = (%d, %d)", ret, rsa_ret);
+			INFO_LOG(WII_IPC_SSL, "IOCTLV_NET_SSL_SETBUILTINCLIENTCERT = (%d, %d)", ret, pk_ret);
 		}
 		else
 		{
@@ -306,12 +302,12 @@ _SSL_NEW_ERROR:
 		int sslID = Memory::Read_U32(BufferOut) - 1;
 		if (SSLID_VALID(sslID))
 		{
-			x509_free(&_SSL[sslID].clicert);
-			rsa_free(&_SSL[sslID].rsa);
-			memset(&_SSL[sslID].clicert, 0, sizeof(x509_cert));
-			memset(&_SSL[sslID].rsa, 0, sizeof(rsa_context));
+			x509_crt_free(&_SSL[sslID].clicert);
+			pk_free(&_SSL[sslID].pk);
+			memset(&_SSL[sslID].clicert, 0, sizeof(x509_crt));
+			memset(&_SSL[sslID].pk, 0, sizeof(pk_context));
 
-			ssl_set_own_cert(&_SSL[sslID].ctx, NULL, NULL);
+			ssl_set_own_cert(&_SSL[sslID].config, NULL, NULL);
 			Memory::Write_U32(SSL_OK, _BufferIn);
 		}
 		else
@@ -328,15 +324,15 @@ _SSL_NEW_ERROR:
 		{
 			std::string cert_base_path(File::GetUserPath(D_WIIUSER_IDX));
 
-			int ret = x509parse_crtfile(&_SSL[sslID].cacert, (cert_base_path + "rootca.pem").c_str());
+			int ret = x509_crt_parse_file(&_SSL[sslID].cacert, (cert_base_path + "rootca.pem").c_str());
 			if (ret)
 			{
-				x509_free(&_SSL[sslID].clicert);
+				x509_crt_free(&_SSL[sslID].clicert);
 				Memory::Write_U32(SSL_ERR_FAILED, _BufferIn);
 			}
 			else
 			{
-				ssl_set_ca_chain(&_SSL[sslID].ctx, &_SSL[sslID].cacert, NULL, _SSL[sslID].hostname);
+				mbedtls_ssl_conf_ca_chain(&_SSL[sslID].config, &_SSL[sslID].cacert, NULL);
 				Memory::Write_U32(SSL_OK, _BufferIn);
 			}
 			INFO_LOG(WII_IPC_SSL, "IOCTLV_NET_SSL_SETBUILTINROOTCA = %d", ret);
@@ -361,7 +357,7 @@ _SSL_NEW_ERROR:
 		{
 			_SSL[sslID].sockfd = Memory::Read_U32(BufferOut2);
 			INFO_LOG(WII_IPC_SSL, "IOCTLV_NET_SSL_CONNECT socket = %d", _SSL[sslID].sockfd);
-			ssl_set_bio(&_SSL[sslID].ctx, net_recv, &_SSL[sslID].sockfd, net_send, &_SSL[sslID].sockfd);
+			mbedtls_ssl_set_bio(&_SSL[sslID].ctx, &_SSL[sslID].sockfd, mbedtls_net_send, mbedtls_net_recv, mbedtls_net_recv_timeout);
 			Memory::Write_U32(SSL_OK, _BufferIn);
 		}
 		else
diff -rupN dolphin-emu-2879cbd2b564-org/Source/Core/Core/Src/IPC_HLE/WII_IPC_HLE_Device_net_ssl.h dolphin-emu-2879cbd2b564-mbedtls/Source/Core/Core/Src/IPC_HLE/WII_IPC_HLE_Device_net_ssl.h
--- dolphin-emu-2879cbd2b564-org/Source/Core/Core/Src/IPC_HLE/WII_IPC_HLE_Device_net_ssl.h	2015-12-11 10:37:53.038739485 -0500
+++ dolphin-emu-2879cbd2b564-mbedtls/Source/Core/Core/Src/IPC_HLE/WII_IPC_HLE_Device_net_ssl.h	2015-12-17 10:10:40.656615000 -0500
@@ -7,9 +7,11 @@
 
 #include "WII_IPC_HLE_Device.h"
 
-#include <polarssl/net.h>
-#include <polarssl/ssl.h>
-#include <polarssl/havege.h>
+#include <mbedtls/config.h>
+#include <mbedtls/net.h>
+#include <mbedtls/ssl.h>
+#include <mbedtls/entropy.h>
+#include <mbedtls/compat-1.3.h>
 
 #define NET_SSL_MAX_HOSTNAME_LEN 256
 #define NET_SSL_MAXINSTANCES 4
@@ -56,11 +58,12 @@ enum SSL_IOCTL
 
 typedef struct {
 	ssl_context ctx;
+	mbedtls_ssl_config config;
 	ssl_session session;
-	havege_state hs;
-	x509_cert cacert;
-	x509_cert clicert;
-	rsa_context rsa;
+	entropy_context entropy;
+	x509_crt cacert;
+	x509_crt clicert;
+	pk_context pk;
 	int sockfd;
 	char hostname[NET_SSL_MAX_HOSTNAME_LEN];
 	bool active;
diff -rupN dolphin-emu-2879cbd2b564-org/Source/Core/Core/Src/Movie.cpp dolphin-emu-2879cbd2b564-mbedtls/Source/Core/Core/Src/Movie.cpp
--- dolphin-emu-2879cbd2b564-org/Source/Core/Core/Src/Movie.cpp	2015-12-11 10:37:53.263851985 -0500
+++ dolphin-emu-2879cbd2b564-mbedtls/Source/Core/Core/Src/Movie.cpp	2015-12-17 10:10:40.658615999 -0500
@@ -22,7 +22,8 @@
 #include "HW/EXI_Channel.h"
 #include "HW/DVDInterface.h"
 #include "../../Common/Src/NandPaths.h"
-#include "polarssl/md5.h"
+#include <mbedtls/config.h>
+#include <mbedtls/md.h>
 #include "scmrev.h"
 #include "NetPlayProto.h"
 
@@ -1196,6 +1197,8 @@ void GetSettings()
 	}
 }
 
+static const mbedtls_md_info_t* s_md5_info = mbedtls_md_info_from_type(MBEDTLS_MD_MD5);
+
 void CheckMD5()
 {
 	for (int i=0, n=0; i<16; i++)
@@ -1211,7 +1214,7 @@ void CheckMD5()
 	unsigned char gameMD5[16];
 	char game[255];
 	memcpy(game, SConfig::GetInstance().m_LocalCoreStartupParameter.m_strFilename.c_str(), SConfig::GetInstance().m_LocalCoreStartupParameter.m_strFilename.size());
-	md5_file(game, gameMD5);
+	mbedtls_md_file(s_md5_info, game, gameMD5);
 
 	if (memcmp(gameMD5,MD5,16) == 0)
 		Core::DisplayMessage("Checksum of current game matches the recorded game.", 2000);
@@ -1225,7 +1228,7 @@ void GetMD5()
 	memset(MD5, 0, sizeof(MD5));
 	char game[255];
 	memcpy(game, SConfig::GetInstance().m_LocalCoreStartupParameter.m_strFilename.c_str(),SConfig::GetInstance().m_LocalCoreStartupParameter.m_strFilename.size());
-	md5_file(game, MD5);
+	mbedtls_md_file(s_md5_info, game, MD5);
 	Core::DisplayMessage("Finished calculating checksum.", 2000);
 }
 
diff -rupN dolphin-emu-2879cbd2b564-org/Source/Core/DiscIO/Src/VolumeWiiCrypted.cpp dolphin-emu-2879cbd2b564-mbedtls/Source/Core/DiscIO/Src/VolumeWiiCrypted.cpp
--- dolphin-emu-2879cbd2b564-org/Source/Core/DiscIO/Src/VolumeWiiCrypted.cpp	2015-12-11 10:37:54.814626985 -0500
+++ dolphin-emu-2879cbd2b564-mbedtls/Source/Core/DiscIO/Src/VolumeWiiCrypted.cpp	2015-12-17 10:10:40.660617000 -0500
@@ -5,7 +5,7 @@
 #include "VolumeWiiCrypted.h"
 #include "VolumeGC.h"
 #include "StringUtil.h"
-#include <polarssl/sha1.h>
+#include <mbedtls/sha1.h>
 
 namespace DiscIO
 {
diff -rupN dolphin-emu-2879cbd2b564-org/Source/Core/DiscIO/Src/VolumeWiiCrypted.h dolphin-emu-2879cbd2b564-mbedtls/Source/Core/DiscIO/Src/VolumeWiiCrypted.h
--- dolphin-emu-2879cbd2b564-org/Source/Core/DiscIO/Src/VolumeWiiCrypted.h	2015-12-11 10:37:54.814626985 -0500
+++ dolphin-emu-2879cbd2b564-mbedtls/Source/Core/DiscIO/Src/VolumeWiiCrypted.h	2015-12-17 10:10:40.662617999 -0500
@@ -7,6 +7,8 @@
 
 #include "Volume.h"
 #include "Blob.h"
+#include <mbedtls/compat-1.3.h>
+#include <mbedtls/aes.h>
 #include "Crypto/aes.h"
 
 // --- this volume type is used for encrypted Wii images ---
diff -rupN dolphin-emu-2879cbd2b564-org/Source/Core/DolphinWX/Src/MemoryCards/WiiSaveCrypted.h dolphin-emu-2879cbd2b564-mbedtls/Source/Core/DolphinWX/Src/MemoryCards/WiiSaveCrypted.h
--- dolphin-emu-2879cbd2b564-org/Source/Core/DolphinWX/Src/MemoryCards/WiiSaveCrypted.h	2015-12-11 10:37:53.807123486 -0500
+++ dolphin-emu-2879cbd2b564-mbedtls/Source/Core/DolphinWX/Src/MemoryCards/WiiSaveCrypted.h	2015-12-17 10:10:40.663618500 -0500
@@ -6,9 +6,11 @@
 #define _WII_SAVE_CRYPTED
 
 #include "StringUtil.h"
+#include <mbedtls/compat-1.3.h>
+#include <mbedtls/aes.h>
 #include "Crypto/aes.h"
 #include "Crypto/tools.h"
-#include "polarssl/md5.h"
+#include <mbedtls/md5.h>
 
 // --- this is used for encrypted Wii save files
 
